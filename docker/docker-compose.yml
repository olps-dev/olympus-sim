# Olympus IoT Simulation - Complete Docker Environment
# Provides full-stack simulation with all components

version: '3.8'

services:
  # MQTT Broker
  mosquitto:
    image: eclipse-mosquitto:2.0
    container_name: olympus-mosquitto
    ports:
      - "1883:1883"
      - "9001:9001"
    volumes:
      - ./infra/mosquitto.conf:/mosquitto/config/mosquitto.conf
      - mosquitto_data:/mosquitto/data
      - mosquitto_logs:/mosquitto/log
    restart: unless-stopped
    networks:
      - olympus-network
    healthcheck:
      test: ["CMD", "mosquitto_pub", "-h", "localhost", "-t", "health", "-m", "test"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Simulation Backend
  simulation:
    build:
      context: .
      dockerfile: Dockerfile.simulation
    container_name: olympus-simulation
    depends_on:
      mosquitto:
        condition: service_healthy
    environment:
      - MQTT_BROKER=mosquitto
      - MQTT_PORT=1883
      - NETWORK_CONDITION=good
      - SIMULATION_MODE=headless
      - LOG_LEVEL=INFO
    volumes:
      - ./metrics:/app/metrics
      - ./network:/app/network
      - simulation_logs:/app/logs
    restart: unless-stopped
    networks:
      - olympus-network
    healthcheck:
      test: ["CMD", "python3", "-c", "import sys; sys.exit(0)"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Dashboard Web Interface
  dashboard:
    build:
      context: .
      dockerfile: Dockerfile.dashboard
    container_name: olympus-dashboard
    ports:
      - "5000:5000"
    depends_on:
      - mosquitto
      - simulation
    environment:
      - FLASK_ENV=production
      - MQTT_BROKER=mosquitto
      - MQTT_PORT=1883
    volumes:
      - ./metrics:/app/metrics:ro
      - dashboard_data:/app/data
    restart: unless-stopped
    networks:
      - olympus-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/api/status"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Metrics Collection and Analysis
  metrics-collector:
    build:
      context: .
      dockerfile: Dockerfile.metrics
    container_name: olympus-metrics
    depends_on:
      - mosquitto
    environment:
      - MQTT_BROKER=mosquitto
      - COLLECTION_INTERVAL=5
      - METRICS_RETENTION_DAYS=7
    volumes:
      - ./metrics:/app/metrics
      - metrics_data:/app/data
    restart: unless-stopped
    networks:
      - olympus-network

  # Network Simulation Controller
  network-controller:
    build:
      context: .
      dockerfile: Dockerfile.network
    container_name: olympus-network
    depends_on:
      - mosquitto
    environment:
      - MQTT_BROKER=mosquitto
      - DEFAULT_CONDITION=realistic
      - ENABLE_DYNAMIC_CONDITIONS=true
    volumes:
      - ./network:/app/network
      - network_config:/app/config
    restart: unless-stopped
    networks:
      - olympus-network
    command: ["python3", "network_controller.py"]

  # Optional: Grafana for Advanced Metrics (commented out by default)
  # grafana:
  #   image: grafana/grafana:latest
  #   container_name: olympus-grafana
  #   ports:
  #     - "3000:3000"
  #   environment:
  #     - GF_SECURITY_ADMIN_PASSWORD=olympus
  #   volumes:
  #     - grafana_data:/var/lib/grafana
  #     - ./infra/grafana:/etc/grafana/provisioning
  #   networks:
  #     - olympus-network

  # Optional: InfluxDB for Time Series Data (commented out by default)
  # influxdb:
  #   image: influxdb:2.0
  #   container_name: olympus-influxdb
  #   ports:
  #     - "8086:8086"
  #   environment:
  #     - INFLUXDB_DB=olympus
  #     - INFLUXDB_ADMIN_USER=admin
  #     - INFLUXDB_ADMIN_PASSWORD=olympus
  #   volumes:
  #     - influxdb_data:/var/lib/influxdb2
  #   networks:
  #     - olympus-network

volumes:
  mosquitto_data:
    driver: local
  mosquitto_logs:
    driver: local
  simulation_logs:
    driver: local
  dashboard_data:
    driver: local
  metrics_data:
    driver: local
  network_config:
    driver: local
  # grafana_data:
  #   driver: local
  # influxdb_data:
  #   driver: local

networks:
  olympus-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16